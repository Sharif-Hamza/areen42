# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: pytest

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      
#test 1

run: 
    command: run
    print: Hello !

    loadstring: (10, 10 , 10, 10, 10)
    get string: load loadstring (15)
    




# commands:
  

  1. commands:
     2. functions

v1: 2
strings:
build:
  working_directory: /tmp
  steps:
    - run:
        name: Creating Dummy Artifacts
        command: |
          echo "my artifact file" > /tmp/art-1;
          mkdir /tmp/artifacts;
          echo "my artifact files in a dir" > /tmp/artifacts/art-2;

    - store_artifacts:
        path: /tmp/art-1
        destination: artifact-file

    - store_artifacts:
        path: /tmp/artifacts


loadstrings: from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def index();
    return render_template('helloWorld.html')
  - end
  ;https://app.circleci.com/pipelines/github/Sharif-Hamza/Code-Edge-Calc/1/workflows/48a3873e-a256-4ae0-b7ba-70f30721ec33/jobs/1?invite=true#step-103-38

  -end 

config: command, Execute end;

((v))  = Value

Value: End


version: 2.1
executors:
  my-custom-executor:
    docker:
      - image: cimg/base:stable
        auth:
          # ensure you have first added these secrets
          # visit app.circleci.com/settings/project/github/Sharif-Hamza/areen42/environment-variables
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
jobs:
  end-code:

    executor: my-custom-executor
    steps:
      - checkout
      - run: |
          -end 
          
          config: command, Execute end;
          
          ((v))  = Value
          
          Value: End

workflows:
  my-custom-workflow:
    jobs:
      - end-code